create database ProveerTen;
use ProveerTen;

-- Roles
CREATE TABLE rol (
    name_rol VARCHAR(25) PRIMARY KEY
);
insert into rol (name_rol) values ('company');
insert into rol (name_rol) values ('provider');
insert into rol (name_rol) values ('grocer');

/*----------------------------------------------------------------------------------------------------------------------------------------------*/

CREATE TABLE company (
    nit_company varchar(15) primary key,
    name_company varchar(100) unique not null,
    email_company varchar(55) unique not null,
    password_company varchar(100) not null,
    national_line_company varchar(20) not null,
    profile_photo_company varchar(100) NULL,
    cover_photo_company varchar(100) null,
    foundation_company date null,
    description_company varchar(255) null,
    fk_name_rol varchar(25) null, foreign key (fk_name_rol) references rol (name_rol)
);

-- Procedimiento de insertar compaÃ±ia
delimiter //
create procedure insertCompany
-- insertCompany
(
 in nit_company varchar (15),
 in name_company varchar (100),
 in email_company varchar (55),
 in password_company varchar (100),
 in national_line_company varchar (20),
 in profile_photo_company varchar (100),
 in cover_photo_company varchar (100),
 in foundation_company date,
 in description_company varchar(255),
 in name_rol varchar (25),
 out message_text varchar (255)
)
begin
    declare count_company int;
    declare error_message varchar(255);
    select count(*) into count_company from company where company.email_company = email_company;
    if count_company > 0 then
        set error_message = 'error company user already exists';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message ;
    else
        insert into company (
	nit_company,
	name_company,
	email_company,
	password_company,
	national_line_company,
	profile_photo_company,
	cover_photo_company,
	foundation_company,
	description_company,
    fk_name_rol
        ) values (
            nit_company,
			name_company,
			email_company,
			password_company,
			national_line_company,
			profile_photo_company,
			cover_photo_company,
			foundation_company,
			description_company,
            name_rol
		);
        set message_text = 'The company was successfully entered';
    end if;
    select message_text;
end //
delimiter ;

-- Procedimiento para traerse la data de la compania
-- Principal uso "Login"
delimiter **
create procedure get_data_company (in _email_company varchar(55))
begin
	declare count_company int;
	declare error_message varchar(65);
    select count(*) into count_company from company where email_company = _email_company;
    if count_company = 0 then 
       set error_message = 'error, company user does not exist';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
	else
		select nit_company, email_company, password_company, fk_name_rol from company where email_company = _email_company;
    end if;
end **


-- sp para traer la data del perfil de la compania
delimiter //
create procedure get_data_profile_company
(
in _nit_company varchar (15)
)
begin
select nit_company, name_company, email_company,national_line_company,profile_photo_company,cover_photo_company,foundation_company,description_company from company where nit_company = _nit_company;
end //
delimiter ;

delimiter //

create procedure getCompany_EmailExist (
    in email_company_param varchar(55),
    out message_text varchar(255)
)
begin
    declare countCompany int;
    declare error_message varchar(255);

    select count(*) into countCompany from company where email_company = email_company_param;

    if countCompany = 0 then
        set error_message = 'error, does not exist';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
    else
        set message_text = 'The company exists';
    end if;

    select message_text;
end //

delimiter ;

delimiter //

create procedure updatePasswordCompany (
    in email_company varchar (55),
	in password_company varchar (100),
    out message_text varchar(255)
)
begin
    declare countCompany int;
    declare error_message varchar(255);

    select count(*) into countCompany from company where company.email_company = email_company;

    if countCompany = 0 then
        set error_message = 'error, does not exist';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
    else
		update company set company.password_company = password_company where company.email_company = email_company;
        set message_text = 'company password update successful';
    end if;

    select message_text;
end //

delimiter ;

delimiter // 

CREATE PROCEDURE update_data_company 
(
 in name_company varchar (100),
 in email_company varchar (55),
 in national_line_company varchar (20),
 in foundation_company date,
 in description_company varchar(255),
 in nit_company varchar (15),
 out message_text varchar (255)
)	
BEGIN
        UPDATE company
        SET
            name_company = name_company,
            email_company = email_company,
            national_line_company = national_line_company,
            foundation_company = foundation_company,
            description_company = description_company
        WHERE company.nit_company = nit_company;
        
        SET message_text = 'Company information updated successfully';
        select message_text;
END //

delimiter ;

/*------------------------------------------------------------------------------------------------------------*/

-- Proveedor
create table provider (
document_provider varchar (10) primary key,
name_provider varchar (50) not null,
last_name_provider varchar (40) not null,
email_provider varchar (55) unique not null,
password_provider varchar (100) not null,
profile_photo_provider varchar (100) null, 
fk_nit_company varchar (15) not null, 
foreign key (fk_nit_company) references company (nit_company),
fk_name_rol varchar (25) not null, 
foreign key (fk_name_rol) references rol (name_rol)
);

create table locationProvider(
fk_document_locationProvider varchar (10) not null, 
foreign key (fk_document_locationProvider) references Provider (document_provider),
city_provider varchar (15),
neighborhood varchar (40) not null,
street varchar (30) not null,
number_street varchar (25)
);
create table phoneProvider(
fk_document_phoneProvider varchar (10) not null, 
foreign key (fk_document_phoneProvider) references Provider (document_provider),
number_provider varchar (15)
);


delimiter //

create procedure insertProvider
-- insertProvider
(
in document_provider varchar (10),
in name_provider varchar (50),
in last_name_provider varchar (40),
in email_provider varchar (55), 
in password_provider varchar (100),
in profile_photo_provider varchar (100),
in fk_nit_company varchar (15),
in name_rol varchar (25),
in city_provider varchar (15),
in neighborhood varchar (40),
in street varchar (30),
in number_street varchar (25),
in number_provider varchar (15),
out message_text varchar (255)
)
begin
    declare count_provider int;
    declare error_message varchar(255);
    select count(*) into count_provider from provider where provider.email_provider = email_provider;
    if count_provider > 0 then
        set error_message = 'error provider user already exists';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message ;
    else
        insert into provider (
	document_provider,
	name_provider,
	last_name_provider,
	email_provider, 
	password_provider,
    profile_photo_provider,
	fk_nit_company,
    fk_name_rol
        ) values (
            document_provider,
	name_provider,
	last_name_provider,
	email_provider, 
	password_provider,
    profile_photo_provider,
	fk_nit_company,
    name_rol
		);
        insert into locationProvider (
        fk_document_locationProvider, 
		city_provider ,
		neighborhood,
		street,
		number_street) values 
        (
        document_provider, 
		city_provider,
		neighborhood,
		street,
		number_street
        );
        insert into phoneProvider (
        fk_document_phoneProvider,
        number_provider
        ) values (
        document_provider,
        number_provider
        );
        set message_text = 'The provider was successfully entered';
    end if;
    select message_text;
end //

delimiter ;

-- Procedimiento para traerse la data del proveedor 
-- Principal uso "Login"
delimiter //
create procedure get_data_provider (in _email_provider varchar(55))
begin
	declare count_provider int;
	declare error_message varchar(65);
    select count(*) into count_provider from provider where email_provider = _email_provider;
    if count_provider = 0 then 
       set error_message = 'error, provider user does not exist';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
	else
		select document_provider, email_provider, password_provider, fk_name_rol from provider where email_provider = _email_provider;
    end if;
end //

-- sp para traer la data del perfil del proveedor
delimiter //
create procedure get_data_profile_provider
(
in document_provider varchar (10)
)
begin
select document_provider,name_provider,last_name_provider,email_provider,profile_photo_provider,fk_nit_company,city_provider,neighborhood,street,number_street,number_provider from provider inner join locationProvider on document_provider = fk_document_locationProvider 
inner join phoneProvider on document_provider = fk_document_phoneProvider where provider.document_provider = document_provider;
end //
delimiter ;


delimiter // 

CREATE PROCEDURE update_data_provider 
(
    IN name_provider VARCHAR(50),
    IN last_name_provider VARCHAR(40),
    IN email_provider VARCHAR(55), 
    IN password_provider VARCHAR(100),
    IN profile_photo_provider VARCHAR(100),
    IN city_provider VARCHAR(15),
    IN neighborhood VARCHAR(40),
    IN street VARCHAR(30),
    IN number_street VARCHAR(25),
    IN number_provider VARCHAR(15),
	IN document_provider VARCHAR(10),
    OUT message_text VARCHAR(255)
)	
BEGIN
        UPDATE provider
        SET
            name_provider = name_provider,
            last_name_provider = last_name_provider,
            email_provider = email_provider,
            password_provider = password_provider,
            profile_photo_provider = profile_photo_provider
        WHERE provider.document_provider = document_provider;

        UPDATE locationProvider
        SET
            city_provider = city_provider,
            neighborhood = neighborhood,
            street = street,
            number_street = number_street
        WHERE fk_document_locationProvider = document_provider;

        UPDATE phoneProvider
        SET number_provider = number_provider
        WHERE fk_document_phoneProvider = document_provider;
        
        SET message_text = 'Provider information updated successfully';
        select message_text;
END //

delimiter ;

delimiter //

create procedure delete_provider 
(
IN document_provider VARCHAR(10),
out message_text varchar (255)
)
begin 

delete from phoneProvider where fk_document_phoneProvider = document_provider;
delete from locationProvider where fk_document_locationProvider = document_provider;
delete FROM provider where provider.document_provider = document_provider;

SET message_text = 'provider delete successful';
select message_text;
end //

delimiter ;


/*----------------------------------------------------------------------------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------------------------------------------------------------------------*/
-- Tendero

create table grocer (
document_grocer varchar (10) primary key,
name_grocer varchar (40) not null,
last_name_grocer varchar (40) not null,
email_grocer varchar (55) unique not null,
name_store varchar (50) not null,
profile_photo_grocer varchar (100) null,
cover_photo_grocer varchar (100) null,
password_grocer varchar (100),
fk_name_rol varchar (25) not null, 
foreign key (fk_name_rol) references rol (name_rol)
);

create table locationGrocer (
fk_document_locationGrocer varchar (10) not null,
foreign key (fk_document_locationGrocer) references grocer (document_grocer),
city_grocer varchar (40) not null,
neighborhood varchar (40) not null,
street varchar (30) not null,
number_street varchar (25),
apartment varchar (25)
);

create table phoneGrocer (
fk_document_phoneGrocer varchar (10) not null,
foreign key (fk_document_phoneGrocer) references grocer (document_grocer),
number_grocer varchar (15)
);


delimiter //

create procedure insertGrocer
-- insertGrocer
(
in document_grocer varchar (10),
in name_grocer varchar (40),
in last_name_grocer varchar (40),
in email_grocer varchar (55),
in name_store varchar (50),
in profile_photo_grocer varchar (100),
in cover_photo_grocer varchar (100),
in city_grocer varchar (40),
in password_grocer varchar (100),
in name_rol varchar (25),	
in neighborhood varchar (40),
in street varchar (30),
in number_street varchar (25),
in apartment varchar (25),
in number_grocer varchar (15),
out message_text varchar (255)
)
begin
    declare count_grocer int;
    declare error_message varchar(255);
SELECT 
    COUNT(*)
INTO count_grocer FROM
    grocer
WHERE
    grocer.email_grocer = email_grocer;
    if count_grocer > 0 then
        set error_message = 'error grocer user already exists';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message ;
    else
        insert into grocer (
document_grocer,
name_grocer,
last_name_grocer,
email_grocer,
name_store,
profile_photo_grocer,
cover_photo_grocer,
password_grocer,
fk_name_rol
        ) values (
document_grocer,
name_grocer,
last_name_grocer,
email_grocer,
name_store,
profile_photo_grocer,
cover_photo_grocer,
password_grocer,
name_rol
		);
        insert into locationGrocer (
        fk_document_locationGrocer,
        city_grocer,
		neighborhood,
		street,
		number_street,
		apartment
        ) 
        values 
        (
        document_grocer,
        city_grocer,
		neighborhood,
		street,
		number_street,
		apartment
        );
        insert into phoneGrocer (
        fk_document_phoneGrocer,
        number_grocer
        ) values (
        document_grocer,
        number_grocer
        );
        set message_text = 'The grocer was successfully entered';
    end if;
SELECT message_text;
end //

delimiter ;




-- Procedimiento para traerse la data del tendero 
-- Principal uso "Login"
delimiter //
create procedure get_data_grocer (in _email_grocer varchar(55))
begin
	declare count_grocer int;
	declare error_message varchar(65);
    select count(*) into count_grocer from grocer where email_grocer = _email_grocer;
    if count_grocer = 0 then 
       set error_message = 'error, grocer user does not exist';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
	else
		select document_grocer, email_grocer, password_grocer, fk_name_rol from grocer where email_grocer = _email_grocer;
    end if;
end // 
delimiter ;

-- sp para traer la data del perfil del tendero
delimiter //
create procedure get_data_profile_grocer
(
in document_grocer varchar (10)
)
begin
select document_grocer,name_grocer,last_name_grocer, email_grocer,name_store,profile_photo_grocer,cover_photo_grocer,city_grocer,neighborhood,street,number_street,apartment,number_grocer from grocer inner join locationGrocer on document_grocer = fk_document_locationGrocer 
inner join phoneGrocer on document_grocer = fk_document_phoneGrocer where grocer.document_grocer = document_grocer;
end //

delimiter //

create procedure getGrocerEmailExist (
    in email_grocer_param varchar(55),
    out message_text varchar(255)
)
begin
    declare countGrocer int;
    declare error_message varchar(255);

    select count(*) into countGrocer from grocer where email_grocer = email_grocer_param;

    if countGrocer = 0 then
        set error_message = 'error, does not exist';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
    else
        set message_text = 'The grocer exists';
    end if;

    select message_text;
end //

delimiter ;

delimiter //

create procedure updatePassword_Grocer (
    in email_grocer varchar(55),
    in password_grocer varchar(100),
    out message_text varchar(255)
)
begin
    declare countGrocer int;
    declare error_message varchar(255);

SELECT 
    COUNT(*)
INTO countGrocer FROM
    grocer
WHERE
    grocer.email_grocer = email_grocer;

    if countGrocer = 0 then
        set error_message = 'error, does not exist';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
    else
        update grocer set grocer.password_grocer = password_grocer where grocer.email_grocer = email_grocer;
        set message_text = 'grocer password update successful';
    end if;

SELECT message_text;
end //

delimiter ;

delimiter // 

CREATE PROCEDURE update_data_grocer 
(
	in name_grocer varchar (40),
	in last_name_grocer varchar (40),
	in email_grocer varchar (55),
	in name_store varchar (50),
	in city_grocer varchar (40),	
	in neighborhood varchar (40),
	in street varchar (30),
	in number_street varchar (25),
	in apartment varchar (25),
	in number_grocer varchar (15),
	in document_grocer varchar (10),
	out message_text varchar (255)
)	
BEGIN
        UPDATE grocer
        SET
            name_grocer = name_grocer,
            last_name_grocer = last_name_grocer,
            email_grocer = email_grocer,
            name_store = name_store
        WHERE grocer.document_grocer = document_grocer;

        UPDATE locationGrocer
        SET
            city_grocer = city_grocer,
            neighborhood = neighborhood,
            street = street,
            number_street = number_street
        WHERE fk_document_locationGrocer = document_grocer;

        UPDATE phoneGrocer
        SET number_grocer = number_grocer
        WHERE fk_document_phoneGrocer = document_grocer;
        
        SET message_text = 'Grocer information updated successfully';
        select message_text;
END //

delimiter ;

call insertCompany ('10122012334-5', 'Colgate', 'colgate@gmail.com','unic1254','555-123-4567',null,null,"2004-01-10",'Descripcion de colgate','company',@message_text);
call insertProvider ('24851785','Juan Felipe','PÃ©rez Holmo','perezholmo@gmail.com','time1234',null,'10122012334-5','provider','BogotÃ¡', 'Chapinero', 'Calle 70', '10-25','123456789',@message_text);
call insertGrocer('1234567890', 'Laura Valentina', 'PÃ©rez GÃ³mez', 'lauravalentina@yahoo.com', 'Super Tienda',null,null, 'BogotÃ¡', 'contrasena123','grocer','Centro', 'Carrera 10', '123', 'Apto 301','3114756954',@message_text);
-- call update_data_grocer('1234567890', 'Laura Valeria', 'Ocampo GÃ³mez', 'lauravalentina1@yahoo.com', 'Super Chuzo','Armenia','Bolivar', 'Carrera 11', '183', 'Apto 302','3018214216',@message_text);
-- call update_data_company ('10122012334-5', 'colgate', 'colgate@gmail.com','555-123-4567',"2004-01-10",'Empresa de elementos de aseo colgate',@message_text);
-- call update_data_provider ('24851785','Juan Titi','Herrera Holmo','herreraholmo@gmail.com','time123',null,'Armenia', 'Chapineros', 'Calle 71', '10-257','123456755',@message_text);
-- call delete_provider('24851785',@message_text)

select * from grocer;

/*----------------------------------------------------------------------------------------------------------------------------------------------*/

/*   Categoria   */

create table Category (
    name_category varchar (50) primary key
);

/* Producto */

create table Product (
id_product varchar(50) primary key,
name_product varchar(55) not null,
description_product varchar(80) not null,
purchase_price_product float not null,
unit_purchase_price_product float,
suggested_unit_selling_price_product float,
purchase_quantity int,
stock_product int not null,
content_product varchar(50),
image_product varchar(500) not null,
availability_product varchar(15) not null,
fk_product_nit_company varchar (15), foreign key (fk_product_nit_company) references company(nit_company)
);


create table Product_category (
fk_product_category_id_product varchar(50), foreign key (fk_product_category_id_product) references product(id_product),
fk_product_category_name_category varchar(50), foreign key (fk_product_category_name_category) references category(name_category)
);

/*----------------------------------------------------------------------------------------------------------------------------------------------*/

delimiter //
create procedure insertProduct
(
in id_product varchar(50),
in name_product varchar(55),
in description_product varchar(80),
in purchase_price_product float,
in unit_purchase_price_product float,
in suggested_unit_selling_price_product float,
in purchase_quantity int,
in stock_product int,
in content_product varchar(50),
in image_product varchar(500),
in availability_product varchar(15),
in fk_product_nit_company varchar (15),
out message_text varchar (255)
)
begin
	insert into product (
		id_product,
		name_product,
		description_product,
		purchase_price_product,
		unit_purchase_price_product,
		suggested_unit_selling_price_product,
		purchase_quantity,
		stock_product,
		content_product,
		image_product,
		availability_product,
		fk_product_nit_company
    )values(
		id_product,
		name_product,
		description_product,
		purchase_price_product,
		unit_purchase_price_product,
		suggested_unit_selling_price_product,
		purchase_quantity,
		stock_product,
		content_product,
		image_product,
		availability_product,
		fk_product_nit_company
    );
	set message_text = 'The product was successfully entered';
	select message_text;
end //

delimiter ;

-- call insertProduct ('P1','Crema de dientes','abc',2500,1400,3200,4,100,'250gr','imagen','Disponible', '10122012334-5',@message_text);
-- call insertProduct ('P2','Jabon','abc',1000,1400,1250,6,150,'250gr','imagen','Disponible', '10122012334-5',@message_text);
-- call insertProduct ('P3','Crema de dientes para niÃ±os','abc',2150,1400,3000,8,58,'250gr','imagen','Disponible', '10122012334-5',@message_text);
-- call insertProduct ('P4','Shampoo','abc',900,1400,1500,5,63,'250gr','imagen','Disponible', '10122012334-5',@message_text);
-- call insertProduct ('P5','Cepillo de dientes','abc',1400,1400,1800,1,25,'250gr','imagen','Disponible', '10122012334-5',@message_text);


delimiter **
create procedure get_name_company_by_id 
(
	in nit_company varchar(15)
)
begin 
    select name_company from company where company.nit_company = nit_company;
end **

delimiter ;

call get_name_company_by_id('10122012334-5');


delimiter //
create procedure insertCategory
(
in name_category varchar(50),
out message_text varchar (255)
)
begin
	declare count_category int;
    declare error_message varchar(255);
	select count(*) into count_category from category where category.name_category = name_category;
    if count_category > 0 then
		set error_message = 'error, this category already exists';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message ;
	else
		insert into category (
			name_category
		)values(
			name_category
		);
    
		set message_text = 'The category was successfully entered';
    end if;
	select message_text;
end //

delimiter ;

call insertCategory ('Bombones', @message_text);


delimiter **

create procedure get_names_category 
()
begin 
    select * from category;
end **

delimiter ;

call get_names_category;



delimiter //

create procedure insert_product_category
(
in id_product varchar(50),
in name_category varchar(50),
out message_text varchar (255)
)
begin
	
    insert into Product_category(
		fk_product_category_id_product,
		fk_product_category_name_category
    ) values (
    	id_product,
		name_category
    );
		set message_text = 'The category and product was successfully entered';
	select message_text;
end //

delimiter ;


-- Tabla de Pedidos
create table orders
(
    id_order varchar (55) primary key,
    order_date datetime not null,
    order_delivery_date datetime not null,
    total_ordered_price decimal(10,2) null,
    status varchar(20) not null,
    fk_document_provider varchar(10) not null	,
    foreign key (fk_document_provider) references provider (document_provider),
    fk_document_grocer varchar(10) not null,
    foreign key (fk_document_grocer) references grocer (document_grocer)
);

create table orders_products (
fk_id_order varchar (55), foreign key (fk_id_order) references orders (id_order),
fk_id_product varchar(50), foreign key (fk_id_product) references product (id_product),
quantity int,
price decimal(10, 2),
total_amount decimal (10,2),
primary key (fk_id_order, fk_id_product)
);

delimiter //
create procedure insertOrders
(
	id_order varchar (55),
    order_delivery_date datetime,
    total_ordered_price decimal(10,2),
    status varchar(20),
    document_provider varchar(10),
    document_grocer varchar(10),
    out message_text varchar (255)
)
begin
	insert into orders (
    id_order,
	order_date,
    order_delivery_date,
    total_ordered_price,
    status ,
    fk_document_provider,
    fk_document_grocer
        ) values (
	id_order,
	now(),
    order_delivery_date,
    total_ordered_price,
    status ,
    document_provider,
    document_grocer
		);
	set message_text = 'The order was successfully entered';
	select message_text;
end //
delimiter ;




delimiter //

create procedure insertOrdersProducts
(
    in id_order varchar(55),
    in id_product varchar(50),
    in quantity int,
    out message_text varchar(255)
)
begin
    declare total_amount decimal(10,2);
    declare price_product float;
	declare current_stock int;
	
        -- Obtener el precio del producto
    select purchase_price_product into price_product
    from product
    where product.id_product = id_product;

        -- Calcular el monto total
        set total_amount = quantity * price_product;

        -- Insertar en la tabla orders_products
        insert into orders_products (
            fk_id_order,
            fk_id_product,
            quantity,
            price,
            total_amount
        ) values (
            id_order,
            id_product,
            quantity,
            price_product,
            total_amount
        );
        
        -- Obtener el stock actual del producto
		select stock_product into current_stock
		from product
		where product.id_product = id_product;
    
	 -- Restar la cantidad pedida al stock del producto
        update product
        set stock_product = current_stock - quantity
        where product.id_product = id_product;
        
		update orders set orders.total_ordered_price = (select sum(total_amount) from orders_products where orders_products.fk_id_order = id_order) where orders.id_order = id_order;

        set message_text = 'The order and products was successfully entered';
        select message_text;
end //

delimiter ;

-- call insertOrders('VhqSWXx','2004-10-01',null,"En proceso",'24851785','1234567890',@message_text);
-- call insertOrdersProducts ('VhqSWXx','P1',11,@message_text);
-- call insertOrdersProducts ('VhqSWXx','P2',17,@message_text);
-- call insertOrdersProducts ('VhqSWXx','P3',25,@message_text);

delimiter //
create procedure get_companies ()
begin

select nit_company,profile_photo_company, name_company from company;

end //
delimiter ;



delimiter //
create procedure get_products 
(
nit_company varchar (15)
)
begin
select id_product,name_product,purchase_price_product,image_product,stock_product from product where product.fk_product_nit_company = nit_company;
end //

delimiter ;


delimiter //
create procedure get_providers (
nit_company varchar (15)
)
begin

select document_provider, name_provider,city_provider from provider inner join locationprovider on provider.document_provider = fk_document_locationProvider where provider.fk_nit_company = nit_company;

end //

delimiter ;

delimiter **
create procedure get_store_grocer_by_id 
(
	in document_grocer varchar (10)
)
begin 
    select name_store from grocer where grocer.document_grocer = document_grocer;
end **

delimiter ;

	
delimiter **
create procedure get_stock
(
	in id_product varchar(50)
)
begin 
    -- Obtener el stock actual del producto
    select stock_product
    from product
    where product.id_product = id_product;
end **



delimiter **
create procedure delete_product (
	in id_product varchar(50),
    out message_text varchar (255)
)
begin 
	delete from product where product.id_product = id_product;
    set message_text = 'The category was successfully entered';
end **
delimiter ;
------------------------------------------
delimiter **
create procedure delete_product_category (
	in fk_product_category_id_product varchar(50),
    out message_text varchar (255)
)
begin 
	delete from product_category where product_category.fk_product_category_id_product = fk_product_category_id_product;
    set message_text = 'The category was successfully entered';
end **
delimiter ;
----------------------------------
delimiter **
create procedure delete_category (
	in name_category varchar(50),
    out message_text varchar(255)
)
begin
	delete from category where category.name_category = name_category;
end **
delimiter ;
call insertProduct('Colanta_Leche_entera_V1i4j','Leche entera','Abc',1234,1234,1234,1234,50,'20ml','image','Yes','55599025484-9',@message_text);
call insertCategory ('helados', @message_text);
call insert_product_category('Colanta_Leche_entera_V1i4j', 'bombones',@message_text);